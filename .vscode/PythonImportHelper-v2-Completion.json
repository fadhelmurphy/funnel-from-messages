[
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "redis.asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis.asyncio",
        "description": "redis.asyncio",
        "detail": "redis.asyncio",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "botocore.client",
        "description": "botocore.client",
        "isExtraImport": true,
        "detail": "botocore.client",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "botocore.client",
        "description": "botocore.client",
        "isExtraImport": true,
        "detail": "botocore.client",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "DictCursor",
        "importPath": "psycopg2.extras",
        "description": "psycopg2.extras",
        "isExtraImport": true,
        "detail": "psycopg2.extras",
        "documentation": {}
    },
    {
        "label": "RealDictCursor",
        "importPath": "psycopg2.extras",
        "description": "psycopg2.extras",
        "isExtraImport": true,
        "detail": "psycopg2.extras",
        "documentation": {}
    },
    {
        "label": "asyncpg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncpg",
        "description": "asyncpg",
        "detail": "asyncpg",
        "documentation": {}
    },
    {
        "label": "parser",
        "importPath": "dateutil",
        "description": "dateutil",
        "isExtraImport": true,
        "detail": "dateutil",
        "documentation": {}
    },
    {
        "label": "gspread",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gspread",
        "description": "gspread",
        "detail": "gspread",
        "documentation": {}
    },
    {
        "label": "Credentials",
        "importPath": "google.oauth2.service_account",
        "description": "google.oauth2.service_account",
        "isExtraImport": true,
        "detail": "google.oauth2.service_account",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "asyncpg,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncpg.",
        "description": "asyncpg.",
        "detail": "asyncpg.",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "api.app.db",
        "description": "api.app.db",
        "peekOfCode": "DATABASE_URL = os.getenv(\"DATABASE_URL\")\n_pool = None\nasync def get_pool():\n    global _pool\n    if _pool is None:\n        _pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=10)\n    return _pool",
        "detail": "api.app.db",
        "documentation": {}
    },
    {
        "label": "_pool",
        "kind": 5,
        "importPath": "api.app.db",
        "description": "api.app.db",
        "peekOfCode": "_pool = None\nasync def get_pool():\n    global _pool\n    if _pool is None:\n        _pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=10)\n    return _pool",
        "detail": "api.app.db",
        "documentation": {}
    },
    {
        "label": "REDIS_URL",
        "kind": 5,
        "importPath": "api.app.main",
        "description": "api.app.main",
        "peekOfCode": "REDIS_URL = os.getenv(\"REDIS_URL\")\nMINIO_ENDPOINT = os.getenv(\"MINIO_ENDPOINT\")\nMINIO_ACCESS_KEY = os.getenv(\"MINIO_ACCESS_KEY\")\nMINIO_SECRET_KEY = os.getenv(\"MINIO_SECRET_KEY\")\nRAW_BUCKET = os.getenv(\"RAW_BUCKET\", \"raw-payloads\")\napp = FastAPI(title=\"Sparks Ingest API\")\n@app.on_event(\"startup\")\nasync def startup():\n    app.state.redis = await redis.from_url(REDIS_URL)\n    app.state.s3 = get_s3_client(MINIO_ENDPOINT, MINIO_ACCESS_KEY, MINIO_SECRET_KEY)",
        "detail": "api.app.main",
        "documentation": {}
    },
    {
        "label": "MINIO_ENDPOINT",
        "kind": 5,
        "importPath": "api.app.main",
        "description": "api.app.main",
        "peekOfCode": "MINIO_ENDPOINT = os.getenv(\"MINIO_ENDPOINT\")\nMINIO_ACCESS_KEY = os.getenv(\"MINIO_ACCESS_KEY\")\nMINIO_SECRET_KEY = os.getenv(\"MINIO_SECRET_KEY\")\nRAW_BUCKET = os.getenv(\"RAW_BUCKET\", \"raw-payloads\")\napp = FastAPI(title=\"Sparks Ingest API\")\n@app.on_event(\"startup\")\nasync def startup():\n    app.state.redis = await redis.from_url(REDIS_URL)\n    app.state.s3 = get_s3_client(MINIO_ENDPOINT, MINIO_ACCESS_KEY, MINIO_SECRET_KEY)\n    ensure_bucket(app.state.s3, RAW_BUCKET)",
        "detail": "api.app.main",
        "documentation": {}
    },
    {
        "label": "MINIO_ACCESS_KEY",
        "kind": 5,
        "importPath": "api.app.main",
        "description": "api.app.main",
        "peekOfCode": "MINIO_ACCESS_KEY = os.getenv(\"MINIO_ACCESS_KEY\")\nMINIO_SECRET_KEY = os.getenv(\"MINIO_SECRET_KEY\")\nRAW_BUCKET = os.getenv(\"RAW_BUCKET\", \"raw-payloads\")\napp = FastAPI(title=\"Sparks Ingest API\")\n@app.on_event(\"startup\")\nasync def startup():\n    app.state.redis = await redis.from_url(REDIS_URL)\n    app.state.s3 = get_s3_client(MINIO_ENDPOINT, MINIO_ACCESS_KEY, MINIO_SECRET_KEY)\n    ensure_bucket(app.state.s3, RAW_BUCKET)\n    app.state.db = await get_pool()",
        "detail": "api.app.main",
        "documentation": {}
    },
    {
        "label": "MINIO_SECRET_KEY",
        "kind": 5,
        "importPath": "api.app.main",
        "description": "api.app.main",
        "peekOfCode": "MINIO_SECRET_KEY = os.getenv(\"MINIO_SECRET_KEY\")\nRAW_BUCKET = os.getenv(\"RAW_BUCKET\", \"raw-payloads\")\napp = FastAPI(title=\"Sparks Ingest API\")\n@app.on_event(\"startup\")\nasync def startup():\n    app.state.redis = await redis.from_url(REDIS_URL)\n    app.state.s3 = get_s3_client(MINIO_ENDPOINT, MINIO_ACCESS_KEY, MINIO_SECRET_KEY)\n    ensure_bucket(app.state.s3, RAW_BUCKET)\n    app.state.db = await get_pool()\n@app.on_event(\"shutdown\")",
        "detail": "api.app.main",
        "documentation": {}
    },
    {
        "label": "RAW_BUCKET",
        "kind": 5,
        "importPath": "api.app.main",
        "description": "api.app.main",
        "peekOfCode": "RAW_BUCKET = os.getenv(\"RAW_BUCKET\", \"raw-payloads\")\napp = FastAPI(title=\"Sparks Ingest API\")\n@app.on_event(\"startup\")\nasync def startup():\n    app.state.redis = await redis.from_url(REDIS_URL)\n    app.state.s3 = get_s3_client(MINIO_ENDPOINT, MINIO_ACCESS_KEY, MINIO_SECRET_KEY)\n    ensure_bucket(app.state.s3, RAW_BUCKET)\n    app.state.db = await get_pool()\n@app.on_event(\"shutdown\")\nasync def shutdown():",
        "detail": "api.app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "api.app.main",
        "description": "api.app.main",
        "peekOfCode": "app = FastAPI(title=\"Sparks Ingest API\")\n@app.on_event(\"startup\")\nasync def startup():\n    app.state.redis = await redis.from_url(REDIS_URL)\n    app.state.s3 = get_s3_client(MINIO_ENDPOINT, MINIO_ACCESS_KEY, MINIO_SECRET_KEY)\n    ensure_bucket(app.state.s3, RAW_BUCKET)\n    app.state.db = await get_pool()\n@app.on_event(\"shutdown\")\nasync def shutdown():\n    try:",
        "detail": "api.app.main",
        "documentation": {}
    },
    {
        "label": "GenericPayload",
        "kind": 6,
        "importPath": "api.app.schemas",
        "description": "api.app.schemas",
        "peekOfCode": "class GenericPayload(BaseModel):\n    provider: Optional[str]\n    room_id: Optional[str]\n    channel: Optional[str]\n    message: Optional[Any]\n    sender: Optional[Any]\n    timestamp: Optional[str]",
        "detail": "api.app.schemas",
        "documentation": {}
    },
    {
        "label": "get_s3_client",
        "kind": 2,
        "importPath": "api.app.utils_s3",
        "description": "api.app.utils_s3",
        "peekOfCode": "def get_s3_client(endpoint, access_key, secret_key):\n    session = boto3.session.Session()\n    return session.client(\n        \"s3\",\n        endpoint_url=f\"http://{endpoint}\",\n        aws_access_key_id=access_key,\n        aws_secret_access_key=secret_key,\n        config=Config(signature_version=\"s3v4\"),\n    )\ndef ensure_bucket(s3, bucket):",
        "detail": "api.app.utils_s3",
        "documentation": {}
    },
    {
        "label": "ensure_bucket",
        "kind": 2,
        "importPath": "api.app.utils_s3",
        "description": "api.app.utils_s3",
        "peekOfCode": "def ensure_bucket(s3, bucket):\n    try:\n        s3.create_bucket(Bucket=bucket)\n    except Exception:\n        pass",
        "detail": "api.app.utils_s3",
        "documentation": {}
    },
    {
        "label": "run_funnel_etl",
        "kind": 2,
        "importPath": "backend.etl_funnel",
        "description": "backend.etl_funnel",
        "peekOfCode": "def run_funnel_etl():\n    conn = psycopg2.connect(**DB_CONFIG)\n    cur = conn.cursor(cursor_factory=DictCursor)\n    cur.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS funnel_table (\n        room_id TEXT,\n        leads_date DATE,\n        channel TEXT,\n        phone_number TEXT,\n        booking_date DATE,",
        "detail": "backend.etl_funnel",
        "documentation": {}
    },
    {
        "label": "DB_CONFIG",
        "kind": 5,
        "importPath": "backend.etl_funnel",
        "description": "backend.etl_funnel",
        "peekOfCode": "DB_CONFIG = {\n    \"dbname\": \"sparks\",\n    \"user\": \"app\",\n    \"password\": \"secret\",\n    \"host\": \"postgres\",\n    \"port\": 5432,\n}\ndef run_funnel_etl():\n    conn = psycopg2.connect(**DB_CONFIG)\n    cur = conn.cursor(cursor_factory=DictCursor)",
        "detail": "backend.etl_funnel",
        "documentation": {}
    },
    {
        "label": "health_check",
        "kind": 2,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "def health_check():\n    return {\"status\": \"ok\"}\n@app.get(\"/funnel-report\")\ndef funnel_report(\n    start_date: Optional[str] = Query(None, description=\"Filter from this date (YYYY-MM-DD)\"),\n    end_date: Optional[str] = Query(None, description=\"Filter until this date (YYYY-MM-DD)\"),\n    channel: Optional[str] = Query(None, description=\"Filter by channel\")\n):\n    conn = psycopg2.connect(**DB_CONFIG)\n    cur = conn.cursor(cursor_factory=RealDictCursor)",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "funnel_report",
        "kind": 2,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "def funnel_report(\n    start_date: Optional[str] = Query(None, description=\"Filter from this date (YYYY-MM-DD)\"),\n    end_date: Optional[str] = Query(None, description=\"Filter until this date (YYYY-MM-DD)\"),\n    channel: Optional[str] = Query(None, description=\"Filter by channel\")\n):\n    conn = psycopg2.connect(**DB_CONFIG)\n    cur = conn.cursor(cursor_factory=RealDictCursor)\n    query = \"SELECT * FROM funnel_table WHERE 1=1\"\n    params = {}\n    if start_date:",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "DB_CONFIG",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "DB_CONFIG = {\n    \"dbname\": \"sparks\",\n    \"user\": \"sparks\",\n    \"password\": \"sparks\",\n    \"host\": \"postgres\",\n    \"port\": 5432,\n}\napp = FastAPI()\n@app.get(\"/health\")\ndef health_check():",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "app = FastAPI()\n@app.get(\"/health\")\ndef health_check():\n    return {\"status\": \"ok\"}\n@app.get(\"/funnel-report\")\ndef funnel_report(\n    start_date: Optional[str] = Query(None, description=\"Filter from this date (YYYY-MM-DD)\"),\n    end_date: Optional[str] = Query(None, description=\"Filter until this date (YYYY-MM-DD)\"),\n    channel: Optional[str] = Query(None, description=\"Filter by channel\")\n):",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "etl.run_etl",
        "description": "etl.run_etl",
        "peekOfCode": "DATABASE_URL = os.getenv(\"DATABASE_URL\")\nREDIS_URL = os.getenv(\"REDIS_URL\")\n# keywords for booking and transaction (can extend)\nBOOKING_KEYWORDS = [\"booking\", \"book\", \"daftar\", \"reserve\", \"registrasi\", \"registr\"]\nTRANSACTION_KEYWORDS = [\"paid\", \"transfer\", \"bayar\", \"pembayaran\", \"lunas\", \"sudah transfer\"]\nmoney_re = re.compile(r\"(\\d{1,3}(?:[.,]\\d{3})*(?:[.,]\\d{2})?)\")  # naive money matcher\nasync def run_etl():\n    redis = await redis_lib.from_url(REDIS_URL)\n    pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=5)\n    try:",
        "detail": "etl.run_etl",
        "documentation": {}
    },
    {
        "label": "REDIS_URL",
        "kind": 5,
        "importPath": "etl.run_etl",
        "description": "etl.run_etl",
        "peekOfCode": "REDIS_URL = os.getenv(\"REDIS_URL\")\n# keywords for booking and transaction (can extend)\nBOOKING_KEYWORDS = [\"booking\", \"book\", \"daftar\", \"reserve\", \"registrasi\", \"registr\"]\nTRANSACTION_KEYWORDS = [\"paid\", \"transfer\", \"bayar\", \"pembayaran\", \"lunas\", \"sudah transfer\"]\nmoney_re = re.compile(r\"(\\d{1,3}(?:[.,]\\d{3})*(?:[.,]\\d{2})?)\")  # naive money matcher\nasync def run_etl():\n    redis = await redis_lib.from_url(REDIS_URL)\n    pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=5)\n    try:\n        # fetch rooms",
        "detail": "etl.run_etl",
        "documentation": {}
    },
    {
        "label": "BOOKING_KEYWORDS",
        "kind": 5,
        "importPath": "etl.run_etl",
        "description": "etl.run_etl",
        "peekOfCode": "BOOKING_KEYWORDS = [\"booking\", \"book\", \"daftar\", \"reserve\", \"registrasi\", \"registr\"]\nTRANSACTION_KEYWORDS = [\"paid\", \"transfer\", \"bayar\", \"pembayaran\", \"lunas\", \"sudah transfer\"]\nmoney_re = re.compile(r\"(\\d{1,3}(?:[.,]\\d{3})*(?:[.,]\\d{2})?)\")  # naive money matcher\nasync def run_etl():\n    redis = await redis_lib.from_url(REDIS_URL)\n    pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=5)\n    try:\n        # fetch rooms\n        async with pool.acquire() as conn:\n            rooms = await conn.fetch(\"SELECT id, room_id, channel FROM rooms\")",
        "detail": "etl.run_etl",
        "documentation": {}
    },
    {
        "label": "TRANSACTION_KEYWORDS",
        "kind": 5,
        "importPath": "etl.run_etl",
        "description": "etl.run_etl",
        "peekOfCode": "TRANSACTION_KEYWORDS = [\"paid\", \"transfer\", \"bayar\", \"pembayaran\", \"lunas\", \"sudah transfer\"]\nmoney_re = re.compile(r\"(\\d{1,3}(?:[.,]\\d{3})*(?:[.,]\\d{2})?)\")  # naive money matcher\nasync def run_etl():\n    redis = await redis_lib.from_url(REDIS_URL)\n    pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=5)\n    try:\n        # fetch rooms\n        async with pool.acquire() as conn:\n            rooms = await conn.fetch(\"SELECT id, room_id, channel FROM rooms\")\n            for r in rooms:",
        "detail": "etl.run_etl",
        "documentation": {}
    },
    {
        "label": "money_re",
        "kind": 5,
        "importPath": "etl.run_etl",
        "description": "etl.run_etl",
        "peekOfCode": "money_re = re.compile(r\"(\\d{1,3}(?:[.,]\\d{3})*(?:[.,]\\d{2})?)\")  # naive money matcher\nasync def run_etl():\n    redis = await redis_lib.from_url(REDIS_URL)\n    pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=5)\n    try:\n        # fetch rooms\n        async with pool.acquire() as conn:\n            rooms = await conn.fetch(\"SELECT id, room_id, channel FROM rooms\")\n            for r in rooms:\n                room_db_id = r[\"id\"]",
        "detail": "etl.run_etl",
        "documentation": {}
    },
    {
        "label": "get_keywords_from_sheet",
        "kind": 2,
        "importPath": "keyword_sync.sync_keywords",
        "description": "keyword_sync.sync_keywords",
        "peekOfCode": "def get_keywords_from_sheet():\n    scopes = [\"https://www.googleapis.com/auth/spreadsheets.readonly\"]\n    creds = Credentials.from_service_account_file(SA_JSON, scopes=scopes)\n    gc = gspread.authorize(creds)\n    sh = gc.open_by_key(SHEET_KEY)\n    ws = sh.sheet1\n    vals = ws.col_values(1)\n    # normalize\n    kws = [v.strip() for v in vals if v and v.strip()]\n    return kws",
        "detail": "keyword_sync.sync_keywords",
        "documentation": {}
    },
    {
        "label": "REDIS_URL",
        "kind": 5,
        "importPath": "keyword_sync.sync_keywords",
        "description": "keyword_sync.sync_keywords",
        "peekOfCode": "REDIS_URL = os.getenv(\"REDIS_URL\", \"redis://redis:6379/0\")\nSHEET_KEY = os.getenv(\"GSHEET_KEY\")  # spreadsheet id\nSA_JSON = os.getenv(\"GOOGLE_SA_JSON\", \"/secrets/google-service-account.json\")\nPOLL_SECONDS = int(os.getenv(\"POLL_SECONDS\", \"60\"))\ndef get_keywords_from_sheet():\n    scopes = [\"https://www.googleapis.com/auth/spreadsheets.readonly\"]\n    creds = Credentials.from_service_account_file(SA_JSON, scopes=scopes)\n    gc = gspread.authorize(creds)\n    sh = gc.open_by_key(SHEET_KEY)\n    ws = sh.sheet1",
        "detail": "keyword_sync.sync_keywords",
        "documentation": {}
    },
    {
        "label": "SHEET_KEY",
        "kind": 5,
        "importPath": "keyword_sync.sync_keywords",
        "description": "keyword_sync.sync_keywords",
        "peekOfCode": "SHEET_KEY = os.getenv(\"GSHEET_KEY\")  # spreadsheet id\nSA_JSON = os.getenv(\"GOOGLE_SA_JSON\", \"/secrets/google-service-account.json\")\nPOLL_SECONDS = int(os.getenv(\"POLL_SECONDS\", \"60\"))\ndef get_keywords_from_sheet():\n    scopes = [\"https://www.googleapis.com/auth/spreadsheets.readonly\"]\n    creds = Credentials.from_service_account_file(SA_JSON, scopes=scopes)\n    gc = gspread.authorize(creds)\n    sh = gc.open_by_key(SHEET_KEY)\n    ws = sh.sheet1\n    vals = ws.col_values(1)",
        "detail": "keyword_sync.sync_keywords",
        "documentation": {}
    },
    {
        "label": "SA_JSON",
        "kind": 5,
        "importPath": "keyword_sync.sync_keywords",
        "description": "keyword_sync.sync_keywords",
        "peekOfCode": "SA_JSON = os.getenv(\"GOOGLE_SA_JSON\", \"/secrets/google-service-account.json\")\nPOLL_SECONDS = int(os.getenv(\"POLL_SECONDS\", \"60\"))\ndef get_keywords_from_sheet():\n    scopes = [\"https://www.googleapis.com/auth/spreadsheets.readonly\"]\n    creds = Credentials.from_service_account_file(SA_JSON, scopes=scopes)\n    gc = gspread.authorize(creds)\n    sh = gc.open_by_key(SHEET_KEY)\n    ws = sh.sheet1\n    vals = ws.col_values(1)\n    # normalize",
        "detail": "keyword_sync.sync_keywords",
        "documentation": {}
    },
    {
        "label": "POLL_SECONDS",
        "kind": 5,
        "importPath": "keyword_sync.sync_keywords",
        "description": "keyword_sync.sync_keywords",
        "peekOfCode": "POLL_SECONDS = int(os.getenv(\"POLL_SECONDS\", \"60\"))\ndef get_keywords_from_sheet():\n    scopes = [\"https://www.googleapis.com/auth/spreadsheets.readonly\"]\n    creds = Credentials.from_service_account_file(SA_JSON, scopes=scopes)\n    gc = gspread.authorize(creds)\n    sh = gc.open_by_key(SHEET_KEY)\n    ws = sh.sheet1\n    vals = ws.col_values(1)\n    # normalize\n    kws = [v.strip() for v in vals if v and v.strip()]",
        "detail": "keyword_sync.sync_keywords",
        "documentation": {}
    },
    {
        "label": "s3_client",
        "kind": 2,
        "importPath": "worker.worker",
        "description": "worker.worker",
        "peekOfCode": "def s3_client():\n    session = boto3.session.Session()\n    return session.client(\n        \"s3\",\n        endpoint_url=f\"http://{MINIO_ENDPOINT}\",\n        aws_access_key_id=MINIO_ACCESS_KEY,\n        aws_secret_access_key=MINIO_SECRET_KEY,\n        config=Config(signature_version=\"s3v4\"),\n    )\nasync def process_entry(pool, s3, entry):",
        "detail": "worker.worker",
        "documentation": {}
    },
    {
        "label": "REDIS_URL",
        "kind": 5,
        "importPath": "worker.worker",
        "description": "worker.worker",
        "peekOfCode": "REDIS_URL = os.getenv(\"REDIS_URL\")\nDATABASE_URL = os.getenv(\"DATABASE_URL\")\nMINIO_ENDPOINT = os.getenv(\"MINIO_ENDPOINT\")\nMINIO_ACCESS_KEY = os.getenv(\"MINIO_ACCESS_KEY\")\nMINIO_SECRET_KEY = os.getenv(\"MINIO_SECRET_KEY\")\nRAW_BUCKET = os.getenv(\"RAW_BUCKET\", \"raw-payloads\")\ndef s3_client():\n    session = boto3.session.Session()\n    return session.client(\n        \"s3\",",
        "detail": "worker.worker",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "worker.worker",
        "description": "worker.worker",
        "peekOfCode": "DATABASE_URL = os.getenv(\"DATABASE_URL\")\nMINIO_ENDPOINT = os.getenv(\"MINIO_ENDPOINT\")\nMINIO_ACCESS_KEY = os.getenv(\"MINIO_ACCESS_KEY\")\nMINIO_SECRET_KEY = os.getenv(\"MINIO_SECRET_KEY\")\nRAW_BUCKET = os.getenv(\"RAW_BUCKET\", \"raw-payloads\")\ndef s3_client():\n    session = boto3.session.Session()\n    return session.client(\n        \"s3\",\n        endpoint_url=f\"http://{MINIO_ENDPOINT}\",",
        "detail": "worker.worker",
        "documentation": {}
    },
    {
        "label": "MINIO_ENDPOINT",
        "kind": 5,
        "importPath": "worker.worker",
        "description": "worker.worker",
        "peekOfCode": "MINIO_ENDPOINT = os.getenv(\"MINIO_ENDPOINT\")\nMINIO_ACCESS_KEY = os.getenv(\"MINIO_ACCESS_KEY\")\nMINIO_SECRET_KEY = os.getenv(\"MINIO_SECRET_KEY\")\nRAW_BUCKET = os.getenv(\"RAW_BUCKET\", \"raw-payloads\")\ndef s3_client():\n    session = boto3.session.Session()\n    return session.client(\n        \"s3\",\n        endpoint_url=f\"http://{MINIO_ENDPOINT}\",\n        aws_access_key_id=MINIO_ACCESS_KEY,",
        "detail": "worker.worker",
        "documentation": {}
    },
    {
        "label": "MINIO_ACCESS_KEY",
        "kind": 5,
        "importPath": "worker.worker",
        "description": "worker.worker",
        "peekOfCode": "MINIO_ACCESS_KEY = os.getenv(\"MINIO_ACCESS_KEY\")\nMINIO_SECRET_KEY = os.getenv(\"MINIO_SECRET_KEY\")\nRAW_BUCKET = os.getenv(\"RAW_BUCKET\", \"raw-payloads\")\ndef s3_client():\n    session = boto3.session.Session()\n    return session.client(\n        \"s3\",\n        endpoint_url=f\"http://{MINIO_ENDPOINT}\",\n        aws_access_key_id=MINIO_ACCESS_KEY,\n        aws_secret_access_key=MINIO_SECRET_KEY,",
        "detail": "worker.worker",
        "documentation": {}
    },
    {
        "label": "MINIO_SECRET_KEY",
        "kind": 5,
        "importPath": "worker.worker",
        "description": "worker.worker",
        "peekOfCode": "MINIO_SECRET_KEY = os.getenv(\"MINIO_SECRET_KEY\")\nRAW_BUCKET = os.getenv(\"RAW_BUCKET\", \"raw-payloads\")\ndef s3_client():\n    session = boto3.session.Session()\n    return session.client(\n        \"s3\",\n        endpoint_url=f\"http://{MINIO_ENDPOINT}\",\n        aws_access_key_id=MINIO_ACCESS_KEY,\n        aws_secret_access_key=MINIO_SECRET_KEY,\n        config=Config(signature_version=\"s3v4\"),",
        "detail": "worker.worker",
        "documentation": {}
    },
    {
        "label": "RAW_BUCKET",
        "kind": 5,
        "importPath": "worker.worker",
        "description": "worker.worker",
        "peekOfCode": "RAW_BUCKET = os.getenv(\"RAW_BUCKET\", \"raw-payloads\")\ndef s3_client():\n    session = boto3.session.Session()\n    return session.client(\n        \"s3\",\n        endpoint_url=f\"http://{MINIO_ENDPOINT}\",\n        aws_access_key_id=MINIO_ACCESS_KEY,\n        aws_secret_access_key=MINIO_SECRET_KEY,\n        config=Config(signature_version=\"s3v4\"),\n    )",
        "detail": "worker.worker",
        "documentation": {}
    }
]